{"version":3,"sources":["webpack:///./task1.js","webpack:///./task2.js","webpack:///./task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WAAQD,EAAQF,KAAOA,OAKpCI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCXXK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA6BG,EAA7B,CAAmCN,QAASM,EAAKN,SAAWM,KAGhE,OAAOhB,QAAQC,QAAQa,IAGrBX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GClBnC,IAIMe,EAAkB,SAAAC,GACpB,IAL+BC,EAAKC,EAK9BvB,GALyBsB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIpB,SAAQ,SAACC,EAASwB,GACzBvB,YAAW,WACYoB,KAAKE,SAAW,IAG/BvB,EAAQ,CAAEyB,GAAIP,EAAYO,GAAItB,KAAMN,IAGxC2B,EAAON,EAAYO,MACpB5B,OAIL6B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACtBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,QAGEwB,EAAW,SAAAF,GACbrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGJR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,K","file":"main.d68c3fea57c152f7c6e6.js","sourcesContent":["const delay = ms => {\n    return new Promise((resolve) => {\n        setTimeout(() => { resolve(ms) }, ms);\n    })\n\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger);\ndelay(1000).then(logger);\ndelay(1500).then(logger); ","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName,) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === userName ? {...user, active: !user.active } : user,\n    );\n\n    return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            }\n\n            reject(transaction.id);\n        }, delay);\n    });\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}